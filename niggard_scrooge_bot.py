import time
import requests
import json
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.by import By
from seleniumwire import webdriver
import json
import requests
import telebot
from telebot import types

#------------------------------------------------------–§—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¢–ì –±–æ—Ç–æ–º  
#—Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ –¢–µ–ª–µ–ë–æ—Ç —Å –∏–º–µ–Ω–µ–º bot
bot = telebot.TeleBot('api_key')

# –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –∫–æ–º–∞–Ω–¥—É /start
@bot.message_handler(commands=["start"])
def start(m, res=False):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å –Ω–∞ P2P")
    btn2 = types.KeyboardButton("–ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –Ω–∞ –∫–∏–≤–∏")
    btn3 = types.KeyboardButton("–ò–Ω—Ñ–æ")
    markup.add(btn1, btn2, btn3)
    bot.send_message(m.chat.id, '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:', reply_markup = markup)

@bot.message_handler(content_types=['text'])
def send_text(m):
    if m.text.lower() == '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É—Ä—Å –Ω–∞ p2p':
        check_valuta(m)
    elif m.text.lower() == '–∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –Ω–∞ –∫–∏–≤–∏':
        check_currency_message(m)
    elif m.text.lower() == '–∏–Ω—Ñ–æ':
        bot.send_sticker(m.chat.id, 'CAADAgADZgkAAnlc4gmfCor5YbYYRAI')

#---------------------------------------–§—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –∫—É—Ä—Å–∞ 
#–í—ã–≤–æ–¥–∏–º –≤—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã, –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.
@bot.message_handler(commands=["check_currency"])
def check_valuta(m):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–¢–µ–Ω–≥–µ ‚Ç∏")
    btn2 = types.KeyboardButton("–†—É–±–ª–∏ ‚ÇΩ")
    back_btn = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")

    markup.add(btn1, btn2, back_btn)
    msg = bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å –∫–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å", reply_markup = markup)
    bot.register_next_step_handler(msg, check_payment_system)

#–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ 
def check_payment_system(m):
    currency_result = []
    if m.text[2:len(m.text)] == '–ù–∞–∑–∞–¥':
        start(m)
    if (m.text == "–¢–µ–Ω–≥–µ ‚Ç∏"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        currency_result.append("KZT")
        btn1 = types.KeyboardButton("ü•ù QIWI")
        btn2 = types.KeyboardButton("üá∞üáøHalykBank")
        back_btn = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
        markup.add(btn1, btn2, back_btn)
        msg = bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É", reply_markup = markup)
        bot.register_next_step_handler(msg, check_trade_type, currency_result)

    elif (m.text == "–†—É–±–ª–∏ ‚ÇΩ"):
        currency_result.append("RUB")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("ü•ù QIWI")
        btn2 = types.KeyboardButton("üíµ Tinkoff")
        btn3 = types.KeyboardButton("üÖ∞Ô∏èAdvcash")
        back_btn = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")
        markup.add(btn1,btn2,btn3, back_btn)
        msg = bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É", reply_markup = markup)
        bot.register_next_step_handler(msg, check_trade_type, currency_result) 

def check_trade_type(m, currency_result):
    if m.text[2:len(m.text)] == '–ù–∞–∑–∞–¥':
        start(m)
    else:
        currency_result.append(m.text[2:len(m.text)])
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("BUY")
        btn2 = types.KeyboardButton("SELL")
        back_btn = types.KeyboardButton("üîô –ù–∞–∑–∞–¥")

        markup.add(btn1,btn2, back_btn)
        msg = bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏", reply_markup = markup)
        bot.register_next_step_handler(msg, check_price_send_message, currency_result)

#–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
def check_price_send_message(m, currency_result):
    currency_result.append(m.text)
    pay_type = currency_result[1] # –ø–µ—Ä–≤—ã–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    fiat_type = currency_result[0] # —Ç–∏–ø —Ñ–∏–∞—Ç–Ω–æ–π –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º –ø–æ–∫—É–ø–∞—Ç—å
    trade_type = currency_result[2] # –ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∞
    markup = types.ReplyKeyboardRemove(selective=False)
    bot.send_message(m.chat.id, check_price(pay_type,fiat_type,trade_type), reply_markup = markup)
    bot.clear_step_handler_by_chat_id(m)
    start(m)

#–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞
@bot.message_handler(commands=["check_currency_qiwi"])
def check_currency_message(m, res=False):
    bot.send_message(m.chat.id, 'KZT/RUB: ' + str(check_qiwi_currency("398","643")))

#------------------------------------------------------–§—É–Ω–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º


#—Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞ –Ω–∞ –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–µ
def check_qiwi_currency(currency_to, currency_from):
    s = requests.Session()
    s.headers = {'content-type': 'application/json'}
    s.headers['Accept'] = 'application/json'
    res = s.get('https://edge.qiwi.com/sinap/crossRates')

    # –≤—Å–µ –∫—É—Ä—Å—ã
    rates = res.json()['result']

    # –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –∫—É—Ä—Å
    rate = [x for x in rates if x['from'] == currency_from and x['to'] == currency_to]
    if (len(rate) == 0):
        print('No rate for this currencies!')
        return
    else:
        return rate[0]['rate']

def check_price(pay_type, fiat_type, trade_type):
    #–º–∞—Å—Å–∏–≤ –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–∏—Å–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    data_array = []
    min_transaction_array = []
    max_transaction_array = []

    result = ""
    #–∫–∞–∫—É—é –≤–∞–ª—é—Ç—É –ø–æ–∫—É–ø–∞–µ–º
    buy_type = "USDT"

    #–í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—è–µ–º –≤ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ –Ω–∞—à–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    data = {
      "asset": buy_type,
      "fiat": fiat_type,
      "merchantCheck": False,
      "page": 1,
      "payTypes": [pay_type],
      "publisherType": None,
      "rows": 10,
      "tradeType": trade_type
    }

    headers = {
        "Accept": "*/*",
        "Accept-Encoding": "gzip, deflate, br",
        "Accept-Language": "ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3",
        "Cache-Control": "no-cache",
        "Connection": "keep-alive",
        "Content-Length": "123",
        "content-type": "application/json",
        "Host": "p2p.binance.com",
        "Origin": "https://p2p.binance.com",
        "Pragma": "no-cache",
        "TE": "Trailers",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0"
    }

    r = requests.post('https://p2p.binance.com/bapi/c2c/v2/friendly/c2c/adv/search', headers=headers, json=data)
    
    #–ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∞–ø–∏
    if (r.status_code == 200):
        data = r.json()
        #–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ data, —Å–º–æ—Ç—Ä–∏–º –ø–æ –∫–ª—é—á—É 'adv'
        offer_count = len(data['data'])
        #—Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã, —Å–º–æ—Ç—Ä—é –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–µ–∑–¥–µ –æ–¥–∏–Ω
        fiat_symbol = data['data'][0]['adv']['fiatSymbol']

        #–¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é
        for i in range(0, offer_count-1):
            data_array.append(data['data'][i]['adv']['price'])
            min_transaction_array.append(data['data'][i]['adv']['minSingleTransAmount'])
            max_transaction_array.append(data['data'][i]['adv']['maxSingleTransAmount'])

            #—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            result += data_array[i] + ' –õ–∏–º–∏—Ç—ã ' + min_transaction_array[i] + '--' + max_transaction_array[i] + fiat_symbol + '\n'

        if trade_type == "BUY":
            trade_type = "–ø–æ–∫—É–ø–∫–µ"
        elif trade_type == "SELL":
            trade_type = "–ø—Ä–æ–¥–∞–∂–µ"

        result = f'–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ {trade_type + " " + fiat_symbol}  (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–µ—Å—è—Ç—å—é –ø–µ—Ä–≤—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏) \n' + result
        return result

#–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)
